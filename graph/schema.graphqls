"""
Timestamp data type
"""
scalar Time

"""
Returned by the authenticate mutation.
Content of bearer_token is required to be supplied in 
Authorization Header on all subsequent API calls.
"""
type AuthToken {
  """
  bearer_token contins JWT token string
  """
  bearer_token: String!
}

"""
Contains information about whether or not an IPV4 address is on a blocklist
"""
type DNSBlockListRecord {
  """
  A unique identifier generated by the system for each record
  """
  uuid: ID!

  """
  Timestamp indicating when the record was first created
  """
  created_at: Time!

  """
  Timestamp indicating when the record was last updated
  """
  updated_at: Time!

  """
  Indicates if the ip_address is on the blocklist. For detailed information on the response code values, 
  you can refer to https://www.spamhaus.org/faq/section/DNSBL%20Usage#200
  """
  response_code: String!

  """
  IPV4 address of the record
  """
  ip_address: String!
}

"""
Coding Challenge Queries
"""
type Query {
  """
  Provides DNS blocklist information for the specified IPV4 address. If the ip address has not been previously specified
  in a previous enqueue mutation, then a DNSBlockListRecord will be returned with an empty uuid and a response_code of "NXDOMAIN"
  """
  getIPDetails(ip: String): DNSBlockListRecord
}

"""
Coding Challenge Mutations
"""
type Mutation {
  """
  Used to autenticate the supplied username and password and to return and AuthToken to be used on subsequent API calls
  """
  authenticate(username: String!, password: String!): AuthToken!

  """
  Used to queue an array of IPV4 addresses onto the aysnchronous job queue so that blocklist information can be obtained
  for those IP Addresses. If the queue is full, then an error will be returned indicating the queue is currently full, and that a retry
  should be attempted.
  """
  enqueue(ip: [String!]!): Boolean
}
