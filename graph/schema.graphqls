

"""
Timestamp data type
"""
scalar Time

"""
Returned by the authenticate mutation.
Content of bearer_token is required to be supplied in 
Authorization Header on all subsequent API calls.
"""
type AuthToken {
  """
  bearer_token contins JWT token string
  """
  bearer_token: String!
}

"""
Contains information about whether or not an IPV4 address in
on a blocklist
"""
type DNSBlockListRecord {
  """
  A unique identifier generated by the system for each record
  """
  uuid: ID!

  """
  Timestamp indicating when the record was first created
  """
  created_at: Time!

  """
  Timestamp indicating when the record was last updated
  """
  updated_at: Time!

  """
  Indicates if the ip_address is on the blocklist
  """
  response_code: String!

  """
  IPV4 address of the record
  """
  ip_address: String!
}

"""
Coding Challenge Queries
"""
type Query {
  """
  Provides DNS blocklist information for the specified IPV4 address
  """
  getIPDetails(ip: String): DNSBlockListRecord
}

"""
Coding Challenge Mutations
"""
type Mutation {
  """
  Used to autenticate the supplied username and password and to return and AuthToken to be used on subsequent API calls
  """
  authenticate(username: String!, password: String!): AuthToken!

  """
  Used to queue an array of IPV4 addresses onto the aysnchronous job queue so that blocklist information can be obtained
  for those IP Addresses
  """
  enqueue(ip: [String!]!): Boolean
}
